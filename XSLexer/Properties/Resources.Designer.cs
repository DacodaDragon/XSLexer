//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XSLexer.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("XSLexer.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # XS word Replacer
        ///# Format:
        ///# OldType:
        ///#	wordvalue : NewType
        ///#	wordvalue : NewType
        ///#	wordvalue : NewType
        ///
        ///# all dataTypes found in XS
        ///Word&gt;
        ///	int: DatT
        ///	float: DatT
        ///	string: DatT
        ///	bool: DatT
        ///	vector: DatT
        ///	void: DatT
        ///
        ///# all reserved keywords in XS
        ///Word&gt;
        ///	if: KeyW
        ///	else: KeyW
        ///	switch: KeyW
        ///	case: KeyW
        ///	return: KeyW
        ///	break: KeyW
        ///	breakpoint: KeyW
        ///	mutable: KeyW
        ///	extern: KeyW
        ///	include: KeyW
        ///	rule: KeyW
        ///	static: KeyW
        ///	const: KeyW
        ///	for: KeyW
        ///	true: KeyW
        ///	false: KeyW.
        /// </summary>
        internal static string DataTypes {
            get {
                return ResourceManager.GetString("DataTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # First phase tokenization chart using regular expression
        ///# 
        ///# == Misc ==
        ///# Until		: [String]  # Include everything Until another token is found
        ///# UntilWith	: [String]  # Include everything Until another token is found, Including the found token
        ///#
        ///# == Validation ==
        ///# RegStart	: [Regex]	# The regex that needs to be valid on the first character
        ///# RegBody	: [Regex]   # The regex that needs to be valid on all characters after the first character
        ///# Word		: [String]  # The regex with the specific word i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TokenDefinitions {
            get {
                return ResourceManager.GetString("TokenDefinitions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* Ultimate True Random Map
        ///** Made by Hagrit and DaCoda
        ///** 
        ///** DaCoda: Have fun reading this
        ///** 
        ///*/
        ///
        ///string GetNormalWalkableTerrainType()
        ///{
        ///	int TerrainType = rmRandInt(0,49);
        ///	switch (TerrainType)
        ///	{		
        ///		case 0: return (&quot;CityTileA&quot;);
        ///		case 1: return (&quot;CityTileAtlantis&quot;);
        ///		case 2: return (&quot;CityTileAtlantiscoral&quot;);
        ///		case 3: return (&quot;CliffGreekB&quot;);
        ///		case 4: return (&quot;CliffEgyptianB&quot;);
        ///		case 5: return (&quot;CliffNorseB&quot;);
        ///		case 6: return (&quot;DirtA&quot;);
        ///		case 7: return (&quot;EgyptianRoadA&quot;);
        ///		c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string XsFunction {
            get {
                return ResourceManager.GetString("XsFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string XsGrammarConfig {
            get {
                return ResourceManager.GetString("XsGrammarConfig", resourceCulture);
            }
        }
    }
}
