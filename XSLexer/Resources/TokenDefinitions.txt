# First phase tokenization chart using regular expression
# 
# == Misc ==
# Until		: [String]  # Include everything Until another token is found
# UntilWith	: [String]  # Include everything Until another token is found, Including the found token
#
# == Validation ==
# CharStart : [string]  # All characters the first character is allowed to be
# CharBody	: [string]	# All characters the characters after the first character are allowed to be.
# RegStart	: [Regex]	# The regex that needs to be valid on the first character
# RegBody	: [Regex]   # The regex that needs to be valid on all characters after the first character
# Word		: [String]  # The regex with the specific word it needs to be to be that token. >> CharStart and CharBody are required.
# Length	: [int]		# Length in characters this token HAS to be (equal)

Word>
	CharStart: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_
	CharBody: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_

CbOp>
	CharStart: {
	Length: 1

CbCl>
	CharStart: }
	Length: 1

PaOp>
	CharStart: (
	Length: 1

PaCl>
	CharStart: )
	Length: 1

SqOp>
	CharStart: [
	Length: 1

SqCl>
	CharStart: ]
	Length: 1

Oper>
	CharStart: +-/*%&^!
	Length: 1

AsOp>
	CharStart: +-/*%^
	CharBody: =
	Length: 2

Asgn> 
	CharStart: =
	Word: = 
	Length: 1

Comp>
	CharStart: =!|&
	CharBody: =&|
	Length: 2

Comp>
	CharStart: ><
	Length: 1

Semc>
	CharStart: ;
	Word: ;

Cmma>
	CharStart: ,
	Word: ,

Numb>
	CharStart: 0123456789.
	CharBody: 0123456789.

SCmt>
	CharStart: /
	CharBody: /
	Length: 2
	Until: NewL

MCmt>
	CharStart: /
	CharBody: *
	Length: 2
	UntilWith: MCme

MCme>
	CharStart: *
	CharBody: /
	Length: 2

NewL>
	CharStart: \r\n
	CharBody: \r\n
	Length: 2

Spac>
	CharStart: \s\t
	CharBody: \s\t

Coln>
	CharStart: :
	Word: :

Stri>
	CharStart: \"
	Word: "
	UntilWith: Stri

Squo>
	CharStart: \'
	Word: '
	UntilWith: Squo

Escp>
	CharStart: \
	CharBody: \"\'n
	Length: 2