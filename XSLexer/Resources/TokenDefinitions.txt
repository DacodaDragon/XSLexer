# First phase tokenization chart using regular expression
# 
# == Misc ==
# Until		: [String]  # Include everything Until another token is found
# UntilWith	: [String]  # Include everything Until another token is found, Including the found token
#
# == Validation ==
# RegStart	: [Regex]	# The regex that needs to be valid on the first character
# RegBody	: [Regex]   # The regex that needs to be valid on all characters after the first character
# Word		: [String]  # The regex with the specific word it needs to be to be that token. >> CharStart and CharBody are required.
# Length	: [int]		# Length in characters this token HAS to be (equal)

Word>
	RegStart: [a-zA-Z_]
	RegBody: [a-zA-Z0-9_]

Brac>
	RegStart: [{}[\]\(\)]
	Length: 1

Oper>
	RegStart: [+\-/*%&^!]
	Length: 1

AsOp>
	RegStart: [\+\-\/\*\%\^]
	RegBody: [\=]
	Length: 2

Asgn> 
	RegStart: [\=]
	Word: = 
	Length: 1

Comp>
	RegStart: [\=\!\|\&]
	RegBody: [\=\&\|]
	Length: 2

Comp>
	RegStart: [\<\>]
	Length: 1

ExpE>
	RegStart: [\;]
	Word: ;

Cmma>
	RegStart: [\,]
	Word: ,

Numb>
	RegStart: [0-9.]
	RegBody: [0-9.]

SCmt>
	RegStart: [/]
	RegBody: [/]
	Length: 2
	Until: NewL

MCmt>
	RegStart: [/]
	RegBody: [*]
	Length: 2
	UntilWith: MCme

MCme>
	RegStart: [*]
	RegBody: [/]
	Length: 2

NewL>
	RegStart: [\r]
	RegBody: [\n]
	Length: 2

Spac>
	RegStart: [ \t]
	RegBody: [ \t]

Coln>
	RegStart: [:]
	Word: :

Stri>
	RegStart: [\"]
	Word: "
	UntilWith: Stri

Squo>
	RegStart: [\']
	Word: '
	UntilWith: Squo

Escp>
	RegStart: [\\]
	RegBody: [\"\'n]
	Length: 2