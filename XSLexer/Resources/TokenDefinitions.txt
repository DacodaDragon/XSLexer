# First phase tokenization chart using regular expression
# 
# == Misc ==
# Until		: [String]  # Include everything Until another token is found
# UntilWith	: [String]  # Include everything Until another token is found, Including the found token
#
# == Validation ==
# CharStart : [Regex]	# The regex that needs to be valid on the first character
# CharBody	: [Regex]   # The regex that needs to be valid on all characters after the first character
# Word		: [String]   # The regex with the specific word it needs to be to be that token. >> CharStart and CharBody are required.
# Length	: [int]		# Length in characters this token HAS to be (equal)

# CharStart isn't a word, since numeric isn't allowed. 
Word>
	CharStart: [a-zA-Z_]
	CharBody: [a-zA-Z0-9_]

Brac>
	CharStart: [{}[\]\(\)]
	Length: 1

Oper>
	CharStart: [+\-/*%&^!]
	Length: 1

AsOp>
	CharStart: [\+\-\/\*\%\^]
	CharBody: [\=]
	Length: 2

Asgn> 
	CharStart: [\=]
	Word: = 
	Length: 1

Comp>
	CharStart: [\=\!\|\&]
	CharBody: [\=\&\|]
	Length: 2

Comp>
	CharStart: [\<\>]
	Length: 1

ExpE>
	CharStart: [\;]
	Word: ;

Cmma>
	CharStart: [\,]
	Word: ,

Numb>
	CharStart: [0-9.]
	CharBody: [0-9.]

SCmt>
	CharStart: [/]
	CharBody: [/]
	Length: 2
	Until: NewL

MCmt>
	CharStart: [/]
	CharBody: [*]
	Length: 2
	UntilWith: MCme

MCme>
	CharStart: [*]
	CharBody: [/]
	Length: 2

# CrLf
NewL>
	CharStart: [\r]
	CharBody: [\n]
	Length: 2

Spac>
	CharStart: [ \t]
	CharBody: [ \t]

Coln>
	CharStart: [:]
	Word: :

Stri>
	CharStart: [\"]
	Word: "
	UntilWith: Stri

Squo>
	CharStart: [\']
	Word: '
	UntilWith: Squo

Escp>
	CharStart: [\\]
	CharBody: [\"\'n]
	Length: 2